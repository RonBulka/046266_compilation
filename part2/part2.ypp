%{
    #include "part2.hpp"
	#include "part2_helpers.h"

    #include<iostream>
    using namespace std;
    
	extern char *yytext;
	extern int yylex();
	extern ParserNode *parseTree; /* Root of parse tree. Defined in the parser. */
	
	void yyerror(char const * message);
%}

%union {
	ParserNode *node;
}
%token INT FLOAT VOID WRITE_ READ_ OPTIONAL WHILE DO IF THEN ELSE RETURN_
%token LPAREN RPAREN LBRACE RBRACE COMMA COLON SEMICOLON 
%token ID INTEGERNUM REALNUM STR 
%token RELOP ADDOP MULOP ASSIGN AND OR NOT
%type <node> PROGRAM FDEFS FUNC_DEC_API FUNC_DEF_API FUNC_DEF_ARGLIST_OPT FUNC_DEC_ARGLIST_OPT DCL_OPT DCL_OPT_VAL FUNC_ARGLIST BLK DCL TYPE STLIST STMT RETURN WRITE READ ASSN LVAL CNTRL BEXP EXP NUM CALL CALL_ARGS CALL_ARGLIST
/* %token WHITESPACE */
%left '<'
%right '>'

%%

PROGRAM : FDEFS { parseTree = makeNode("PROGRAM", NULL, $1.node);}
;

FDEFS :   FDEFS FUNC_DEF_API BLK { $$.node = makeNode("FDEFS", NULL, concatList($1.node, concatList($2.node, $3.node)));}
		| FDEFS FUNC_DEC_API { $$.node = makeNode("FDEFS", NULL, concatList($1.node, $2.node));}
		| /* empty */ { $1.node = makenode("EPSILON", NULL, NULL);
						$$.node = makenode("FDEFS", NULL, $1.node); }
;

FUNC_DEC_API :   TYPE ID LPAREN RPAREN SEMICOLON { concatList($1.node, $2.node);
												   concatList($2.node, $3.node);
												   concatList($3.node, $4.node);
												   concatList($4.node, $5.node);
												   $$.node = makeNode("FUNC_DEC_API", NULL, $1.node);}
			   | TYPE ID LPAREN FUNC_ARGLIST RPAREN SEMICOLON { concatList($1.node, $2.node);
																concatList($2.node, $3.node);
																concatList($3.node, $4.node);
																concatList($4.node, $5.node);
																concatList($5.node, $6.node);
																$$.node = makeNode("FUNC_DEC_API", NULL, $1.node);}
			   | TYPE ID LPAREN FUNC_DEC_ARGLIST_OPT RPAREN SEMICOLON { concatList($1.node, $2.node);
																		concatList($2.node, $3.node);
																		concatList($3.node, $4.node);
																		concatList($4.node, $5.node);
																		concatList($5.node, $6.node);
																		$$.node = makeNode("FUNC_DEC_API", NULL, $1.node);}
			   | TYPE ID LPAREN FUNC_ARGLIST COMMA FUNC_DEC_ARGLIST_OPT RPAREN SEMICOLON { concatList($1.node, $2.node);
																						   concatList($2.node, $3.node);
																						   concatList($3.node, $4.node);
																						   concatList($4.node, $5.node);
																						   concatList($5.node, $6.node);
																						   concatList($6.node, $7.node);
																						   concatList($7.node, $8.node);
																						   $$.node = makeNode("FUNC_DEC_API", NULL, $1.node);}
;

FUNC_DEC_ARGLIST_OPT :   FUNC_DEC_ARGLIST_OPT COMMA DCL_OPT { concatList($1.node, $2.node);
															  concatList($2.node, $3.node);
															  $$.node = makeNode("FUNC_DEC_ARGLIST_OPT", NULL, $1.node);}
					   | DCL_OPT { $$.node = makeNode("FUNC_DEC_ARGLIST_OPT", NULL, $1.node);}
;

DCL_OPT : ID COLON OPTIONAL TYPE {concatList($1.node, $2.node);
								  concatList($2.node, $3.node);
								  concatList($3.node, $4.node);
								  $$.node = makeNode("DCL_OPT", NULL, $1.node);}
		  | ID COMMA DCL_OPT{concatList($1.node, $2.node);
							 concatList($2.node, $3.node);
							 $$.node = makeNode("DCL_OPT", NULL, $1.node);}
;

FUNC_DEF_API : TYPE ID LPAREN RPAREN {concatList($1.node, $2.node);
									  concatList($2.node, $3.node);
									  concatList($3.node, $4.node);
									  $$.node = makeNode("FUNC_DEF_API", NULL, $1.node);}
			   | TYPE ID LPAREN FUNC_ARGLIST RPAREN {concatList($1.node, $2.node);
													 concatList($2.node, $3.node);
													 concatList($3.node, $4.node);
													 concatList($4.node, $5.node);
													 $$.node = makeNode("FUNC_DEF_API", NULL, $1.node);}
			   | TYPE ID LPAREN FUNC_DEF_ARGLIST_OPT RPAREN {concatList($1.node, $2.node);
															concatList($2.node, $3.node);
															concatList($3.node, $4.node);
															concatList($4.node, $5.node);
															$$.node = makeNode("FUNC_DEF_API", NULL, $1.node);}
			   | TYPE ID LPAREN FUNC_ARGLIST COMMA FUNC_DEF_ARGLIST_OPT RPAREN {concatList($1.node, $2.node);
																				concatList($2.node, $3.node);
																				concatList($3.node, $4.node);
																				concatList($4.node, $5.node);
																				concatList($5.node, $6.node);
																				concatList($6.node, $7.node);
																				$$.node = makeNode("FUNC_DEF_API", NULL, $1.node);}
;

FUNC_DEF_ARGLIST_OPT : FUNC_DEF_ARGLIST_OPT COMMA DCL_OPT_VAL {concatList($1.node, $2.node);
															   concatList($2.node, $3.node);
															   $$.node = makeNode("FUNC_DEF_ARGLIST_OPT", NULL, $1.node);}
					   | DCL_OPT_VAL{ $$.node = makeNode("FUNC_DEF_ARGLIST_OPT", NULL, $1.node);}
;

DCL_OPT_VAL : ID ASSIGN NUM COLON OPTIONAL TYPE {concatList($1.node, $2.node);
												concatList($2.node, $3.node);
												concatList($3.node, $4.node);
												concatList($4.node, $5.node);
												concatList($5.node, $6.node);
												$$.node = makeNode("DCL_OPT_VAL", NULL, $1.node);}
			  | ID ASSIGN NUM COMMA DCL_OPT_VAL {concatList($1.node, $2.node);
												 concatList($2.node, $3.node);
												 concatList($3.node, $4.node);
												 concatList($4.node, $5.node);
												 $$.node = makeNode("DCL_OPT_VAL", NULL, $1.node);}
;

FUNC_ARGLIST : FUNC_ARGLIST COMMA DCL {concatList($1.node, $2.node);
									   concatList($2.node, $3.node);
									   $$.node = makeNode("FUNC_ARGLIST", NULL, $1.node);}
			   | DCL { $$.node = makeNode("FUNC_ARGLIST", NULL, $1.node);}
;

BLK : LBRACE STLIST RBRACE {concatList($1.node, $2.node);
							concatList($2.node, $3.node);
							$$.node = makeNode("BLK", NULL, $1.node);}
;

DCL : ID COLON TYPE {concatList($1.node, $2.node);
					 concatList($2.node, $3.node);
					 $$.node = makeNode("DCL", NULL, $1.node);}
	  | ID COMMA DCL {concatList($1.node, $2.node);
					  concatList($2.node, $3.node);
					  $$.node = makeNode("DCL", NULL, $1.node);}
;

TYPE : INT { $$.node = makeNode("TYPE", NULL, $1.node);}
	   | FLOAT { $$.node = makeNode("TYPE", NULL, $1.node);}
	   | VOID{ $$.node = makeNode("TYPE", NULL, $1.node);}
;

STLIST : STLIST STMT {concatList($1.node, $2.node);
					  $$.node = makeNode("STLIST", NULL, $1.node);}
		 | /* empty */ { $1.node = makeNode("EPSILON", NULL, NULL);
						 $$.node = makeNode("STLIST", NULL, $1.node);}
;

STMT : DCL SEMICOLON {concatList($1.node, $2.node);
					  $$.node = makeNode("STMT", NULL, $1.node);}
	   | ASSN { $$.node = makeNode("STMT", NULL, $1.node);}
	   | EXP SEMICOLON {concatList($1.node, $2.node);
						$$.node = makeNode("STMT", NULL, $1.node);}
	   | CNTRL { $$.node = makeNode("STMT", NULL, $1.node);}
	   | READ { $$.node = makeNode("STMT", NULL, $1.node);}
	   | WRITE { $$.node = makeNode("STMT", NULL, $1.node);}
	   | RETURN { $$.node = makeNode("STMT", NULL, $1.node);}
	   | BLK {$$.node = makeNode("STMT", NULL, $1.node);}
;

RETURN : RETURN_ EXP SEMICOLON {concatList($1.node, $2.node);
								concatList($2.node, $3.node);
								$$.node = makeNode("RETURN", NULL, $1.node);}
	   | RETURN_ SEMICOLON { $$.node = makeNode("RETURN", NULL, $1.node);}
;

WRITE : WRITE_ LPAREN EXP RPAREN SEMICOLON { concatList($1.node, $2.node);
											concatList($2.node, $3.node);
											concatList($3.node, $4.node);
											concatList($4.node, $5.node);
											$$.node = makeNode("WRITE", NULL, $1.node);}
		| WRITE_ LPAREN STR RPAREN SEMICOLON { concatList($1.node, $2.node);
											  concatList($2.node, $3.node);
											  concatList($3.node, $4.node);
											  concatList($4.node, $5.node);
											  $$.node = makeNode("WRITE", NULL, $1.node);}
;
READ : READ_ LPAREN LVAL RPAREN SEMICOLON { concatList($1.node, $2.node);
										   concatList($2.node, $3.node);
										   concatList($3.node, $4.node);
										   concatList($4.node, $5.node);
										   $$.node = makeNode("READ", NULL, $1.node);};
ASSN : LVAL ASSIGN EXP SEMICOLON { concatList($1.node, $2.node);
								   concatList($2.node, $3.node);
								   concatList($3.node, $4.node);
								   $$.node = makeNode("ASSN", NULL, $1.node);}
;

LVAL : ID { $$.node = makeNode("LVAL", NULL, $1.node);}
;

CNTRL : IF BEXP THEN STMT ELSE STMT { concatList($1.node, $2.node);
									  concatList($2.node, $3.node);
									  concatList($3.node, $4.node);
									  concatList($4.node, $5.node);
									  concatList($5.node, $6.node);
									  $$.node = makeNode("CNTRL", NULL, $1.node);}
		| IF BEXP THEN STMT { concatList($1.node, $2.node);
							  concatList($2.node, $3.node);
							  concatList($3.node, $4.node);
							  $$.node = makeNode("CNTRL", NULL, $1.node);}
		| WHILE BEXP DO STMT { concatList($1.node, $2.node);
							   concatList($2.node, $3.node);
							   concatList($3.node, $4.node);
							   $$.node = makeNode("CNTRL", NULL, $1.node);}
;

BEXP : BEXP OR BEXP { concatList($1.node, $2.node);
					  concatList($2.node, $3.node);
					  $$.node = makeNode("BEXP", NULL, $1.node);}
	   | BEXP AND BEXP { concatList($1.node, $2.node);
						concatList($2.node, $3.node);
						$$.node = makeNode("BEXP", NULL, $1.node);}
	   | NOT BEXP { concatList($1.node, $2.node);
					$$.node = makeNode("BEXP", NULL, $1.node);}
	   | EXP RELOP EXP { concatList($1.node, $2.node);
						 concatList($2.node, $3.node);
						 $$.node = makeNode("BEXP", NULL, $1.node);}
	   | LPAREN BEXP RPAREN { concatList($1.node, $2.node);
							  concatList($2.node, $3.node);
							  $$.node = makeNode("BEXP", NULL, $1.node);}
;

EXP : EXP ADDOP EXP { concatList($1.node, $2.node);
					 concatList($2.node, $3.node);
					 $$.node = makeNode("EXP", NULL, $1.node);}
	  | EXP MULOP EXP { concatList($1.node, $2.node);
						concatList($2.node, $3.node);
						$$.node = makeNode("EXP", NULL, $1.node);}
	  | LPAREN EXP RPAREN { concatList($1.node, $2.node);
							concatList($2.node, $3.node);
							$$.node = makeNode("EXP", NULL, $1.node);}
	  | ID { $$.node = makeNode("EXP", NULL, $1.node);}
	  | NUM { $$.node = makeNode("EXP", NULL, $1.node);}
	  | CALL { $$.node = makeNode("EXP", NULL, $1.node);}
;

NUM : INTEGERNUM { $$.node = makeNode("NUM", NULL, $1.node); }
	  | REALNUM { $$.node = makeNode("NUM", NULL, $1.node); }
;

CALL : ID LPAREN CALL_ARGS RPAREN { concatList($1.node, $2.node);
								   concatList($2.node, $3.node);
								   concatList($3.node, $4.node);
								   $$.node = makeNode("CALL", NULL, $1.node);}
;

CALL_ARGS : CALL_ARGLIST { $$.node = makeNode("CALL_ARGS", NULL, $1.node);}
			| /* empty */ { $1.node = makeNode("EPSILON", NULL, NULL);
							$$.node = makeNode("CALL_ARGS", NULL, $1.node);};
CALL_ARGLIST : CALL_ARGLIST COMMA EXP { concatList($1.node, $2.node);
										concatList($2.node, $3.node);
										$$.node = makeNode("CALL_ARGLIST", NULL, $1.node);}
			   | EXP { $$.node = makeNode("CALL_ARGLIST", NULL, $1.node);}
;

%%

int main()
{
    return yyparse();
}

void yyerror(char const * message)
{
    printf("\nSyntax error: '%s' in line number %d\n", yytext, yylineno);
    exit(2);
}
